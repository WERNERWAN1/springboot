package com.werner.filter;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.werner.common.util.RedisUtil;import com.werner.common.util.ResponseData;import lombok.extern.slf4j.Slf4j;import org.apache.log4j.Logger;import org.apache.tomcat.util.http.fileupload.RequestContext;import org.springframework.core.annotation.Order;import javax.annotation.Resource;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@Slf4j@Order(1)@WebFilter(filterName = "filterAuthUser" ,urlPatterns = "/*")public class FilterAuthUser  implements Filter {    @Resource    private RedisUtil redisUtil;    @Override    public void init(FilterConfig filterConfig) throws ServletException {        log.info(">>>>>>>>>>>> init filter <<<<<<<<<<<");    }    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {        HttpServletRequest req=(HttpServletRequest)servletRequest;        HttpServletResponse resp=(HttpServletResponse) servletResponse;        String uri=req.getRequestURI();        String[] uriSp=uri.split("/");        for(int i=0;i<uriSp.length;i++){            if("needLogin".equals(uriSp[i])){                String token=req.getParameter("token");                if(null==token){                    resp.sendError(404,"数据错误");                    log.info("token未传入");                return;                }                JSONObject json= JSON.parseObject(redisUtil.get(token).toString());                if(null==json){                    resp.sendError(404,"登录超时");                    log.info("登录过期");                    return;                }                filterChain.doFilter(req,resp);            }else if ("unNeedLogin".equals(uriSp[i])){                filterChain.doFilter(req,resp);            }        }        filterChain.doFilter(req,resp);//其他情况下执行(swagger)    }    @Override    public void destroy() {        log.info(">>>>>>>>>>>>>>> filter destroy <<<<<<<<<<<<<<");    }}